asmProg = asmDesc*:d markedOperator*:o {AsmProg(:d, :o)};
markedOperator = markedTestOperator | markedAssignOperator | markedPrintOperator | jumpOperator;
asmDesc = mark:m1 ":" ws varName$v ws ":=" ws typeInitializer:t ws "goto" ws mark:m2 {AsmDesc(:m1, Var($v), :t, :m2)};

typeInitializer =  "(" ws typeInitializer:t1 "," ws typeInitializer:t2 ")" ws {HyperTable(:t1,:t2)}
                  | "(" ws typeInitializer:t ")" ws {:t}
                  | intInitializer:i {:i} 
                  | arrayInitializer:a ws {:a};
intInitializer = '0' ws {Int()}
                | "(" ws intInitializer:i ")" ws {:i};
arrayInitializer = "[]" ws {HyperTable(Int(), Int())} 
                  | "[" ws arrayInitializer:a "]" ws {HyperTable(Int(), :a)} 
                  | "(" ws arrayInitializer:a ")" ws {:a};
markedAssignOperator = mark:m1 ":" ws varName$v ws ":=" ws arExpr:e "goto" ws mark:m2 {MarkedAssignOperator(:m1, Var($v), :e, :m2)};
markedTestOperator = mark:m1 ":" ws relation:r ws "then" ws mark:m2 "else" ws mark:m3 {MarkedTestOperator(:m1,:r,:m2,:m3 )};
markedPrintOperator = mark:m1 ":" ws "SHOW" ws arExpr:ar ws "goto" ws mark:m2 {MarkedPrintOperator(:m1, :ar, :m2)};
jumpOperator = mark:m1 ":" ws "goto" ws mark:m2 {JumpOperator(:m1, :m2)};


mark = number$n ws {Mark(s2i($n))};

assign = varName$var ws ":=" ws arExpr:val {Assign(Var($var), :val)};

relation = 
          "(" ws arExpr:o1"!=" ws arExpr:o2")" ws{NotEqual(:o1, :o2)}
        | "(" ws arExpr:o1 "=" ws arExpr:o2")" ws {Equal(:o1, :o2)}
        | "(" ws arExpr:o1"<" ws arExpr:o2")" ws {Less(:o1,:o2)}
        | "(" ws arExpr:o1 "<=" ws arExpr:o2 ")" ws {LessE(:o1,:o2)}
        | "(" ws arExpr:o1">" ws arExpr:o2")" ws {Great(:o1,:o2)}
        | "(" ws arExpr:o1 ">=" ws arExpr:o2 ")" ws {GreatE(:o1,:o2)}
        | "!" ws "(" ws relation:r ")" ws {InverseRelation(:r)}
        | "!" ws relation:r ws {InverseRelation(:r)}
        | "(" ws relation:r ")" ws {:r};

arExpr =
        "(" ws arExpr:o1 "-" ws arExpr:o2 ")" ws {Sub(:o1,:o2)}
      | "(" ws arExpr:o1 "*" ws arExpr:o2 ")" ws {Mul(:o1,:o2)}
      | "(" ws arExpr:o1 "+" ws arExpr:o2 ")" ws {Add(:o1,:o2)}
      | "(" ws arExpr:o1 "/" ws arExpr:o2 ")" ws {Div(:o1,:o2)}
      | "(" ws arExpr:ar ")" ws {:ar}
      | operand:o {:o}
      | funExpr:f {:f};


funExpr =
          "APP" ws "(" ws operandWithoutNumber:o1 "," ws arExpr:o2 ")" ws {App(:o1,:o2)}
        | "UPD" ws "(" ws operandWithoutNumber:o1 "," ws arExpr:o2 "," ws arExpr:o3 ")" ws {Upd(:o1,:o2,:o3)}
        | "(" ws funExpr:ar ")" ws {:ar};

operand = number$v ws {Num(s2i($v))}| varName$v ws {Var($v)} | "(" ws operand:o1 ")" ws {:o1};
operandWithoutNumber = varName$v ws {Var($v)} | "(" ws operandWithoutNumber:o1 ")" ws {:o1};

number = (digit+);
varName = (letter+ (letter | digit)*);
letter = 'a'-'z';
digit = '0'-'9';

ws = s*;
s = " " | "\n" | "\t";